{"version":3,"sources":["components/KittyCard/KittyCard.js","components/SearchField/SearchField.js","actions/setSearchfield.js","actions/types.js","components/KittyCardList/KittyCardList.js","actions/kittiesAction.js","App.js","reducers/getKittiesReducer.js","reducers/index.js","store.js","serviceWorker.js","index.js"],"names":["KittyCard","props","cardArray","kitties","map","kitty","name","id","username","email","phone","react_default","a","createElement","Col","key","xs","sm","md","lg","Card","border","style","width","className","Header","fontSize","background","Image","src","concat","margin","roundedCircle","ListGroup","variant","ListGroupItem","Fragment","SearchField","onInputChange","e","_this","setSearchfield","target","value","type","onChange","this","Component","connect","text","payload","KittyCardList","getKitties","_this$props","kittySearchfield","filteredKitties","filter","toLowerCase","includes","Container","components_SearchField_SearchField","Row","components_KittyCard_KittyCard","state","kittyContacts","_ref","Object","asyncToGenerator","regenerator_default","mark","_callee","dispatch","res","data","wrap","_context","prev","next","axios","get","sent","stop","_x","apply","arguments","App","components_KittyCardList_KittyCardList","intialState","combineReducers","length","undefined","action","objectSpread","middleWare","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","Boolean","window","location","hostname","match","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4b826d06.chunk.js","sourcesContent":["import React from 'react'\nimport { Card, Image, Col, ListGroup, ListGroupItem } from 'react-bootstrap'\n\nconst KittyCard = (props) => {\n\n    const cardArray = props.kitties.map(kitty => {\n        const { name, id, username, email, phone } = kitty;\n        return (\n            < Col key={id} xs=\"12\" sm=\"12\" md=\"5\" lg=\"4\" >\n                <Card\n                    border=\"secondary\"\n                    style={{ width: '18rem' }}\n                    className=\"my-4\">\n                    <Card.Header style={{ fontSize: '1.4rem' }}>{name}\n                    </Card.Header>\n                    <div style={{ background: \"linear-gradient(0.75turn, #3f87a6, #ebf8e1, #f69d3c)\" }}>\n                        <Image src={`https://robohash.org/${id}.png?set=set4`} style={{ width: '12rem', margin: '1rem auto' }} roundedCircle />\n                    </div>\n\n                    <ListGroup variant=\"flush\">\n                        <ListGroupItem>\n                            @{username}\n                        </ListGroupItem>\n                        <ListGroupItem>\n                            {email}\n                        </ListGroupItem>\n                        <ListGroupItem>\n                            {phone}\n                        </ListGroupItem>\n                    </ListGroup>\n                </Card>\n            </Col >\n        )\n    });\n    return (\n        <React.Fragment>\n            {cardArray}\n        </React.Fragment>\n    )\n}\n\nexport default KittyCard","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { setSearchfield } from '../../actions/setSearchfield';\nimport PropTypes from 'prop-types'\n\n\nclass SearchField extends Component {\n\n\n    onInputChange = e => {\n        this.props.setSearchfield(e.target.value)\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <h3 className=\"text-muted\">Look up a name:</h3>\n                <input\n                    className=\"border border-secondary rounded\"\n                    type=\"text\"\n                    name=\"kittySearchField\"\n                    onChange={this.onInputChange}\n\n                />\n            </React.Fragment>\n        )\n    }\n}\n\nSearchField.propTypes = {\n    setSearchfield: PropTypes.func.isRequired\n}\n\nexport default connect(null, { setSearchfield })(SearchField)\n","import { SEARCH_FIELD } from \"./types\";\n\nexport const setSearchfield = text => {\n    return {\n        type: SEARCH_FIELD,\n        payload: text\n    }\n}","export const GET_KITTIES = 'GET_KITTIES'\nexport const SEARCH_FIELD = 'SEARCH_FIELD'","import React, { Component } from 'react'\nimport { Container, Row } from 'react-bootstrap'\nimport KittyCard from '../KittyCard/KittyCard'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport { getKitties } from '../../actions/kittiesAction'\nimport SearchField from '../SearchField/SearchField';\n\nclass KittyCardList extends Component {\n    componentDidMount() {\n        const { getKitties } = this.props\n        getKitties();\n    }\n\n\n    render() {\n        const { kitties, kittySearchfield } = this.props;\n        const filteredKitties = kitties.filter(kitties => {\n            return kitties.name.toLowerCase().includes(kittySearchfield.toLowerCase())\n        });\n        if (!kitties) {\n            return <h1>Loading...</h1>\n        } else {\n            return (\n                <Container>\n                    <h1>KittyContacts</h1>\n                    <SearchField />\n                    <Row className=\"justify-content-center\">\n                        <KittyCard kitties={filteredKitties} />\n                    </Row>\n                </Container>\n            )\n        }\n    }\n}\n\nKittyCardList.propTypes = {\n    kitties: PropTypes.array.isRequired,\n    getKitties: PropTypes.func.isRequired\n}\n\nconst mapStateToProps = (state) => ({\n    kitties: state.kitties.kittyContacts,\n    kittySearchfield: state.kitties.kittySearchfield\n});\n\n\nexport default connect(mapStateToProps, { getKitties })(KittyCardList)\n","import { GET_KITTIES } from './types'\nimport axios from 'axios'\n\nexport const getKitties = () => async dispatch => {\n    const res = await axios.get('https://jsonplaceholder.typicode.com/users')\n    const data = res.data\n\n    dispatch({\n        type: GET_KITTIES,\n        payload: data\n    })\n}","import React, { Component } from 'react';\nimport './App.css';\n\n// Components\nimport KittyCardList from './components/KittyCardList/KittyCardList'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App justify-content-center text-center\" >\n        <h1 className=\"display-4 p-5\">KittyFriends</h1>\n        <hr />\n        <KittyCardList />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { GET_KITTIES, SEARCH_FIELD } from '../actions/types'\n\n\nconst intialState = {\n    kittyContacts: [],\n    kittySearchfield: ''\n}\n\nexport default function (state = intialState, action) {\n    switch (action.type) {\n        case GET_KITTIES:\n            return {\n                ...state,\n                kittyContacts: action.payload\n            };\n        case SEARCH_FIELD:\n            return {\n                ...state,\n                kittySearchfield: action.payload,\n            }\n        default:\n            return state;\n    }\n}\n","import { combineReducers } from 'redux'\nimport getKittiesReducer from './getKittiesReducer'\n\n\nexport default combineReducers({\n    kitties: getKittiesReducer,\n\n})","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk'\nimport { composeWithDevTools } from 'remote-redux-devtools';\nimport rootReducer from './reducers'\n\nconst initialState = {}\n\nconst middleWare = [thunk]\n\nconst store = createStore(rootReducer, initialState, composeWithDevTools(applyMiddleware(...middleWare)));\n\nexport default store;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport { Provider } from 'react-redux'\nimport store from './store'\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}